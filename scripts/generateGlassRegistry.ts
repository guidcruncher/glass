import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const componentsDir = path.resolve(__dirname, '../src/components')
const scssComponentsDir = path.resolve(__dirname, '../src/scss/components')
const outputFile = path.resolve(__dirname, '../src/components/index.ts')
const scssOutputFile = path.resolve(__dirname, '../src/scss/_components.scss')

const scssFiles = fs.readdirSync(scssComponentsDir).filter(f => f.endsWith('.scss'))
const files = fs.readdirSync(componentsDir)
const vueFiles = files.filter(f => f.endsWith('.vue'))

const registryEntries = vueFiles.map(file => {
  const name = file.replace('.vue', '')
  return `import ${name} from './${file}'`
})

const exportEntries = vueFiles.map(file => {
  const name = file.replace('.vue', '')
  return `  ${name},`
})

const scssFromEntries = scssFiles.map(file => {
  const name = file.replace('.vue', '.scss')
  return `@use './components/${name}';`
})

const exportFromEntries = vueFiles.map(file => {
  const name = file.replace('.vue', '')
  return `export ${name} from './components/{file}'`
})

const content = `// Auto-generated by generateGlassRegistry.ts
${registryEntries.join('\n')}

export const GlassComponents = {
${exportEntries.join('\n')}
};

// Vue 3 Plugin Install Function
export default {
  install(app) {
    Object.keys(GlassComponents).forEach((name) => {
      app.component(name, GlassComponents[name]);
    });
  }, 
};
`

const scssContent = `// Auto-generated by generateGlassRegistry.ts
${scssFromEntries.join('\n')}
`

fs.writeFileSync(scssOutputFile, scssContent)
fs.writeFileSync(outputFile, content)
console.log(`âœ… glassRegistry.ts generated with ${vueFiles.length} components.`)
